#define _CRT_SECURE_NO_WARNINGS 
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#define ROW 3
#define COL 3
void chush(char arr[ROW][COL], int row, int col);
void print(char arr[ROW][COL], int row, int col);
void playermove(char arr[ROW][COL], int row, int col);
void computermove(char arr[ROW][COL], int row, int col);
char iswin(char arr[ROW][COL], int row, int col);



void chush(char arr[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			arr[i][j] = ' ';
		}
	}
}

void print(char arr[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		int j = 0;
		for (j = 0; j < col; j++)
		{
			printf(" %c ", arr[i][j]);
			if (j < col - 1)
			{
				printf("|");
			}
		}
			printf("\n");
			if (i < row - 1)
			{
				for (j = 0; j < col; j++)
				{
					printf("---");
					if (j < col - 1)
					{
						printf("|");
					}
				}
				printf("\n");
			}
		
	}
}
void playermove(char arr[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	while (1)
	{
		printf("玩家回合，请输入坐标\n");
		scanf("%d %d", &x, &y);
		if (x >= 1 && x <= row && y <= col && y >= 1)
		{
			if (arr[x - 1][y - 1] == ' ')
			{
				arr[x - 1][y - 1] = '*';
				break;
			}
			else
			{
				printf("该坐标已被有棋子，请重新选择\n");
			}
		}
		else
		{
			printf("非法输入，请重新输入\n");
		}
	}
}
void computermove(char arr[ROW][COL], int row, int col)
{
	
	int x = 0;
	int y = 0;
	printf("电脑回合，请等待\n");
	
	while (1)
	{
		x = rand() % row;
		y = rand() % col;
		if (arr[x][y] == ' ')
		{
			arr[x][y] = '#';
			break;
		}
	}
}
int isfull(char arr[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (arr[i][j]== ' ')
			{
				return 0;
			}
		}
	}
	return 1;
}
char iswin(char arr[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		if (arr[i][0] == arr[i][1] && arr[i][1] == arr[i][2] && arr[i][1] != ' ')
			return arr[i][1];
	}
	for (i = 0; i < col; i++)
	{
		if (arr[0][i] == arr[1][i] && arr[1][i] == arr[2][i] && arr[1][i] != ' ')
		{
			return arr[1][i];
		}
	}
	if (arr[0][0] == arr[1][1] && arr[1][1] == arr[2][2] && arr[1][1] != ' ')
	{
		return arr[1][1];
	}
	if (arr[0][2] == arr[1][1] && arr[1][1] == arr[2][0] && arr[1][1] != ' ')
	{
		return arr[1][1];
	}
	if (1 == isfull(arr, ROW, COL))
	{
		return 'Q';
	}
	return 'C';
}



void game()
{
	char ret = 0;
	char arr[ROW][COL]= { 0 };
	chush(arr, ROW, COL);
	print(arr, ROW, COL);
	while (1)
	{
		playermove(arr, ROW, COL);
		print(arr, ROW, COL);
		 ret=iswin(arr, ROW, COL);
		 if (ret != 'C')
		 {
			 break;
		 }
		computermove(arr, ROW, COL);
		print(arr, ROW, COL);
		ret = iswin(arr, ROW, COL);
		if (ret != 'C')
		{
			break;
		}
	}
	if (ret == '*')
	{
		printf("玩家赢了\n");
	}
	else if (ret == '#')
	{
		printf("电脑赢了\n");
	}
	else
	{
		printf("平局\n");
	}
}
void menu()
{
	printf("*************************\n");
	printf("*******三子棋游戏********\n");
	printf("*****1.play  0.exit******\n");
	printf("*************************\n");
}
void test()
{
	srand((unsigned int)time(NULL));
	int i=0;
	do
	{
		menu();
		printf("输入1开始游戏，输入0退出游戏，请选择\n");
		scanf("%d", &i);
		switch (i)
		{
		case 1:
			printf("游戏开始\n");
			game();
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("输入错误请重新输入\n");
			break;
		}
	} while (i);
}
int main()
{
	test();
	return 0;
}
